{"version":3,"sources":["ChatMessages.js","MessageInput.js","chatApi.js","App.js","reportWebVitals.js","index.js"],"names":["styles","height","ChatMessages","props","messages","List","map","item","index","Item","message","MessageInput","placeholder","useState","messageInput","setMessageInput","InputGroup","Input","value","onChange","Button","onClick","onSend","axios","defaults","baseURL","process","API_URL","fetchMessages","a","get","response","console","log","data","status","sendMessage","post","padding","width","buttonStyles","marginBottom","App","setMessages","loadMessages","sendAndUpdate","updated","className","style","Container","Header","Content","ButtonToolbar","appearance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAqBA,IAAMA,EAAS,CACbC,OAAQ,QAGKC,EApBf,SAAuBC,GACrB,IAAMC,EAAWD,EAAMC,UAAY,GAEnC,OACE,cAACC,EAAA,EAAD,CAAML,OAAQA,EAAd,SAEII,EAASE,KAAI,SAACC,EAAMC,GAAP,OACX,cAACH,EAAA,EAAKI,KAAN,CAAuBD,MAAOA,EAA9B,SACGD,EAAKG,SADQF,S,6CCSXG,EAhBM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAgBT,EAAY,iCACVU,mBAAS,IADC,mBAC3CC,EAD2C,KAC7BC,EAD6B,KAGlD,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOL,YAAaA,EAAaM,MAAOJ,EAAcK,SAAUJ,IAChE,cAACC,EAAA,EAAWI,OAAZ,CAAmBC,QAAS,WAC1BlB,EAAMmB,OAAO,CAAEZ,QAASI,IACxBC,EAAgB,KAFlB,SAIE,cAAC,IAAD,U,iBCbRQ,IAAMC,SAASC,QAAUC,mIAAYC,SAAW,wBAEhD,IAAMC,EAAa,uCAAG,4BAAAC,EAAA,sEACGN,IAAMO,IAAI,KADb,UACdC,EADc,OAEpBC,QAAQC,IAAI,gBAAiBF,EAASG,MACd,MAApBH,EAASI,OAHO,yCAIXJ,EAASG,MAJE,gCAMX,IANW,2CAAH,qDAUbE,EAAW,uCAAG,WAAO1B,GAAP,eAAAmB,EAAA,sEACKN,IAAMc,KAAK,IAAK3B,GADrB,cACZqB,EADY,yBAEXA,EAASG,MAFE,2CAAH,sDC2BjB,IAAMlC,EAAS,CACbsC,QAAS,MACTC,MAAO,QAGHC,EAAe,CACnBC,aAAc,SAGDC,EA3Cf,WAAiB,IAAD,EACkB7B,mBAAS,IAD3B,mBACPT,EADO,KACGuC,EADH,KAGRC,EAAY,uCAAG,4BAAAf,EAAA,sEACID,IADJ,OACbxB,EADa,OAEnB4B,QAAQC,IAAI,mBAAoB7B,GAChCuC,EAAYvC,GAHO,2CAAH,qDAMZyC,EAAa,uCAAG,WAAOnC,GAAP,eAAAmB,EAAA,sEACEO,EAAY1B,GADd,OACdoC,EADc,OAEpBH,EAAYG,GAFQ,2CAAH,sDAKnB,OACE,qBAAKC,UAAU,iBAAiBC,MAAOhD,EAAvC,SACE,eAACiD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,wCAEF,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAChC,EAAA,EAAD,CAAQiC,WAAW,UAAUhC,QAASuB,EAAcI,MAAOR,EAA3D,6BAIF,cAAC,EAAD,CAAcpC,SAAUA,IACxB,cAAC,EAAD,CAAckB,OAAQuB,aCtBjBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6b828fd.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport { React } from 'react'\nimport { List } from 'rsuite'\nimport 'rsuite/dist/rsuite.min.css'\n\nfunction ChatMessages (props) {\n  const messages = props.messages || []\n\n  return (\n    <List styles={styles}>\n      {\n        messages.map((item, index) => (\n          <List.Item key={index} index={index}>\n            {item.message}\n          </List.Item>\n        ))\n      }\n    </List>\n  )\n}\n\nconst styles = {\n  height: '90vh'\n}\n\nexport default ChatMessages\n","/* eslint-disable react/prop-types */\nimport { React, useState } from 'react'\nimport { InputGroup, Input } from 'rsuite'\nimport SendIcon from '@rsuite/icons/Send'\n\nconst MessageInput = ({ placeholder, ...props }) => {\n  const [messageInput, setMessageInput] = useState('')\n\n  return (\n    <InputGroup>\n      <Input placeholder={placeholder} value={messageInput} onChange={setMessageInput} />\n      <InputGroup.Button onClick={() => {\n        props.onSend({ message: messageInput })\n        setMessageInput('')\n      }}>\n        <SendIcon />\n      </InputGroup.Button>\n    </InputGroup>\n  )\n}\n\nexport default MessageInput\n","import axios from 'axios'\n\naxios.defaults.baseURL = process.env.API_URL || 'http://localhost:3000'\n\nconst fetchMessages = async () => {\n  const response = await axios.get('/')\n  console.log('fetchMessages', response.data)\n  if (response.status === 200) {\n    return response.data\n  } else {\n    return []\n  }\n}\n\nconst sendMessage = async (message) => {\n  const response = await axios.post('/', message)\n  return response.data\n}\n\nexport { fetchMessages, sendMessage }\n","import { Container, Header, Content, Button, ButtonToolbar } from 'rsuite'\nimport ChatMessages from './ChatMessages'\nimport 'rsuite/dist/rsuite.min.css'\nimport MessageInput from './MessageInput'\nimport { fetchMessages, sendMessage } from './chatApi'\nimport { React, useState } from 'react'\n\nfunction App () {\n  const [messages, setMessages] = useState([])\n\n  const loadMessages = async () => {\n    const messages = await fetchMessages()\n    console.log('Got new message:', messages)\n    setMessages(messages)\n  }\n\n  const sendAndUpdate = async (message) => {\n    const updated = await sendMessage(message)\n    setMessages(updated)\n  }\n\n  return (\n    <div className=\"show-container\" style={styles}>\n      <Container>\n        <Header>\n          <h1>Chat</h1>\n        </Header>\n        <Content>\n          <ButtonToolbar>\n            <Button appearance='primary' onClick={loadMessages} style={buttonStyles}>\n              Load messages\n            </Button>\n          </ButtonToolbar>\n          <ChatMessages messages={messages} />\n          <MessageInput onSend={sendAndUpdate} />\n        </Content>\n      </Container>\n    </div>\n  )\n}\n\nconst styles = {\n  padding: '1em',\n  width: '50vw'\n}\n\nconst buttonStyles = {\n  marginBottom: '1.5em'\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}